{"version":3,"sources":["Components/Quiz/Quiz.jsx","App.jsx","index.js"],"names":["Quiz","questions","setQuestions","useState","currentQuestionIndex","setCurrentQuestionIndex","lock","setLock","score","setScore","result","setResult","Option1","useRef","Option2","Option3","Option4","optionArray","useEffect","async","response","axios","get","params","limit","data","error","console","fetchQuestions","currentQuestion","log","_jsx","children","checkAns","e","currect_ans","correctOption","target","classList","add","prev","current","_jsxs","className","style","textAlign","_Fragment","length","onClick","reset","title","ref","option_1","option_2","option_3","option_4","next","prevIndex","forEach","option","remove","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7783cec.chunk.js","sourcesContent":["// Quiz.jsx\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios'; // For making HTTP requests\r\nimport './Quiz.css'\r\n\r\nconst Quiz = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [lock, setLock] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [result, setResult] = useState(false);\r\n\r\n  const Option1 = useRef(null);\r\n  const Option2 = useRef(null);\r\n  const Option3 = useRef(null);\r\n  const Option4 = useRef(null);\r\n\r\n  const optionArray = [Option1, Option2, Option3, Option4];\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/questions', {\r\n          params: { limit: 5 }\r\n        });\r\n        setQuestions(response.data);\r\n        //setLoading(false); \r\n      } catch (error) {\r\n        console.error('Error fetching questions:', error);\r\n        //setLoading(false); \r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, []);\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  console.log(currentQuestion)\r\n\r\n  if (!currentQuestion) {\r\n    return <div>No Questions available...</div>;\r\n  }\r\n\r\n\r\n  const checkAns = (e, currect_ans) => {\r\n    if (!lock) {\r\n      const correctOption = currentQuestion.currect_ans === 'a' ? 1 :\r\n                            currentQuestion.currect_ans === 'b' ? 2 :\r\n                            currentQuestion.currect_ans === 'c' ? 3 :\r\n                            4;\r\n      if (correctOption === currect_ans) {\r\n        e.target.classList.add(\"correct\");\r\n        setLock(true);\r\n        setScore(prev => prev + 1);\r\n      } else {\r\n        e.target.classList.add(\"wrong\");\r\n        setLock(true);\r\n        optionArray[correctOption - 1].current.classList.add(\"correct\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const next = () => {\r\n    if (lock) {\r\n      if (currentQuestionIndex === questions.length - 1) {\r\n        setResult(true);\r\n        return;\r\n      }\r\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\r\n      setLock(false);\r\n      optionArray.forEach(option => {\r\n        option.current.classList.remove(\"wrong\");\r\n        option.current.classList.remove(\"correct\");\r\n      });\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/questions');\r\n        setQuestions(response.data);\r\n        setCurrentQuestionIndex(0);\r\n        setScore(0);\r\n        setLock(false);\r\n        setResult(false);\r\n      } catch (error) {\r\n        console.error('Error fetching questions:', error);\r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n      <h1 style={{ textAlign: 'center' }}>Quiz</h1>\r\n      <hr />\r\n      {result ? (\r\n        <>\r\n          <h2>You Scored {score} out of {questions.length}</h2>\r\n          <button onClick={reset}>Reset</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h2>{currentQuestionIndex + 1}. {currentQuestion.title}</h2>\r\n          <ul>\r\n            <li ref={Option1} onClick={(e) => checkAns(e, 1)}>{currentQuestion.option_1}</li>\r\n            <li ref={Option2} onClick={(e) => checkAns(e, 2)}>{currentQuestion.option_2}</li>\r\n            <li ref={Option3} onClick={(e) => checkAns(e, 3)}>{currentQuestion.option_3}</li>\r\n            <li ref={Option4} onClick={(e) => checkAns(e, 4)}>{currentQuestion.option_4}</li>\r\n          </ul>\r\n          <button onClick={next}>Next</button>\r\n          <div className=\"index\">{currentQuestionIndex + 1} of {questions.length} questions</div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n","import React from 'react'\r\nimport Quiz from './Components/Quiz/Quiz'\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Quiz/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App'; // Ensure the path to your App component is correct\r\nimport './Components/Quiz/Quiz.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root') // This should match the id in public/index.html\r\n);"],"sourceRoot":""}